// <auto-generated />
using System;
using MES_F1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MES_F1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250408161533_AddEstimateDurationToInstructionStep")]
    partial class AddEstimateDurationToInstructionStep
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MES_F1.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MES_F1.Models.Instruction", b =>
                {
                    b.Property<int>("InstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructionId"));

                    b.Property<string>("InstructionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionPartType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("InstructionURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructionId");

                    b.ToTable("Instructions");

                    b.HasData(
                        new
                        {
                            InstructionId = 1,
                            InstructionName = "Front Wing 2025 mid v.1.0",
                            InstructionPartType = "FrontWing"
                        },
                        new
                        {
                            InstructionId = 2,
                            InstructionName = "Front Wing 2025 low v.1.0",
                            InstructionPartType = "FrontWing"
                        },
                        new
                        {
                            InstructionId = 3,
                            InstructionName = "Front Wing 2025 high v.1.0",
                            InstructionPartType = "FrontWing"
                        },
                        new
                        {
                            InstructionId = 4,
                            InstructionName = "Front Wing 2025 mid v.1.1",
                            InstructionPartType = "FrontWing"
                        },
                        new
                        {
                            InstructionId = 5,
                            InstructionName = "Right Sidepod Cooling pipe 2025 v.1.0",
                            InstructionPartType = "CoolingPipe"
                        },
                        new
                        {
                            InstructionId = 6,
                            InstructionName = "MGU-K Radiator 2025 v.1.0",
                            InstructionPartType = "Radiator"
                        });
                });

            modelBuilder.Entity("MES_F1.Models.InstructionSteps", b =>
                {
                    b.Property<int>("InstructionStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructionStepId"));

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("int");

                    b.Property<int>("InstructionId")
                        .HasColumnType("int");

                    b.Property<string>("InstructionStepDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructionStepNumber")
                        .HasColumnType("int");

                    b.Property<string>("StepWorkScope")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("InstructionStepId");

                    b.HasIndex("InstructionId");

                    b.ToTable("InstructionSteps");

                    b.HasData(
                        new
                        {
                            InstructionStepId = 1,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 1,
                            InstructionStepDescription = "Laying layers of carbon fiber",
                            InstructionStepNumber = 1,
                            StepWorkScope = "CompositeLaying"
                        },
                        new
                        {
                            InstructionStepId = 2,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 1,
                            InstructionStepDescription = "Hardening carbon fiber inside an autoclave",
                            InstructionStepNumber = 2,
                            StepWorkScope = "OperatingMachines"
                        },
                        new
                        {
                            InstructionStepId = 3,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 1,
                            InstructionStepDescription = "Paintjob",
                            InstructionStepNumber = 3,
                            StepWorkScope = "Painting"
                        },
                        new
                        {
                            InstructionStepId = 4,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 2,
                            InstructionStepDescription = "Laying layers of carbon fiber",
                            InstructionStepNumber = 1,
                            StepWorkScope = "CompositeLaying"
                        },
                        new
                        {
                            InstructionStepId = 5,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 2,
                            InstructionStepDescription = "Hardening carbon fiber inside an autoclave",
                            InstructionStepNumber = 2,
                            StepWorkScope = "OperatingMachines"
                        },
                        new
                        {
                            InstructionStepId = 6,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 2,
                            InstructionStepDescription = "Paintjob",
                            InstructionStepNumber = 3,
                            StepWorkScope = "Painting"
                        },
                        new
                        {
                            InstructionStepId = 7,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 3,
                            InstructionStepDescription = "Laying layers of carbon fiber",
                            InstructionStepNumber = 1,
                            StepWorkScope = "CompositeLaying"
                        },
                        new
                        {
                            InstructionStepId = 8,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 3,
                            InstructionStepDescription = "Hardening carbon fiber inside an autoclave",
                            InstructionStepNumber = 2,
                            StepWorkScope = "OperatingMachines"
                        },
                        new
                        {
                            InstructionStepId = 9,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 3,
                            InstructionStepDescription = "Paintjob",
                            InstructionStepNumber = 3,
                            StepWorkScope = "Painting"
                        },
                        new
                        {
                            InstructionStepId = 10,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 4,
                            InstructionStepDescription = "Laying layers of carbon fiber",
                            InstructionStepNumber = 1,
                            StepWorkScope = "CompositeLaying"
                        },
                        new
                        {
                            InstructionStepId = 11,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 4,
                            InstructionStepDescription = "Hardening carbon fiber inside an autoclave",
                            InstructionStepNumber = 2,
                            StepWorkScope = "OperatingMachines"
                        },
                        new
                        {
                            InstructionStepId = 12,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 4,
                            InstructionStepDescription = "Paintjob",
                            InstructionStepNumber = 3,
                            StepWorkScope = "Painting"
                        },
                        new
                        {
                            InstructionStepId = 13,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 5,
                            InstructionStepDescription = "Cutting set of metal parts",
                            InstructionStepNumber = 1,
                            StepWorkScope = "MetalForming"
                        },
                        new
                        {
                            InstructionStepId = 14,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 5,
                            InstructionStepDescription = "Welding pipes",
                            InstructionStepNumber = 2,
                            StepWorkScope = "Welding"
                        },
                        new
                        {
                            InstructionStepId = 15,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 5,
                            InstructionStepDescription = "Grinding and blending a weld",
                            InstructionStepNumber = 3,
                            StepWorkScope = "Welding"
                        },
                        new
                        {
                            InstructionStepId = 16,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 6,
                            InstructionStepDescription = "Cutting set of metal parts",
                            InstructionStepNumber = 1,
                            StepWorkScope = "MetalForming"
                        },
                        new
                        {
                            InstructionStepId = 17,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 6,
                            InstructionStepDescription = "Welding radiator plates",
                            InstructionStepNumber = 2,
                            StepWorkScope = "Welding"
                        },
                        new
                        {
                            InstructionStepId = 18,
                            EstimatedDurationMinutes = 60,
                            InstructionId = 6,
                            InstructionStepDescription = "Grinding and blending a weld",
                            InstructionStepNumber = 3,
                            StepWorkScope = "Welding"
                        });
                });

            modelBuilder.Entity("MES_F1.Models.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineId"));

                    b.Property<string>("Localization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("MachineId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("MES_F1.Models.MaterialLocation", b =>
                {
                    b.Property<int>("MaterialLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialLocationId"));

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("MaterialLocationMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WarehouseSpotId")
                        .HasColumnType("int");

                    b.HasKey("MaterialLocationId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("WarehouseSpotId");

                    b.ToTable("MaterialLocation");
                });

            modelBuilder.Entity("MES_F1.Models.Materials", b =>
                {
                    b.Property<int>("MaterialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialsId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaterialsId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("MES_F1.Models.PartLocation", b =>
                {
                    b.Property<int>("PartLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartLocationId"));

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<string>("PartLocationMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WarehouseSpotId")
                        .HasColumnType("int");

                    b.HasKey("PartLocationId");

                    b.HasIndex("PartId");

                    b.HasIndex("WarehouseSpotId");

                    b.ToTable("PartLocation");
                });

            modelBuilder.Entity("MES_F1.Models.Parts", b =>
                {
                    b.Property<int>("PartsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartsId"));

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartsId");

                    b.HasIndex("ProductionId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("MES_F1.Models.Production", b =>
                {
                    b.Property<int>("ProductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionId"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstructionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ProductionId");

                    b.HasIndex("InstructionId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("MES_F1.Models.ProductionTask", b =>
                {
                    b.Property<int>("ProductionTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionTaskId"));

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructionStep")
                        .HasColumnType("int");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("ProductionTaskId");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("TeamId");

                    b.ToTable("ProductionTasks");
                });

            modelBuilder.Entity("MES_F1.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamWorkScope")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("MES_F1.Models.TeamRole", b =>
                {
                    b.Property<int>("TeamRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamRoleId"));

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamRoleId");

                    b.ToTable("TeamRoles");

                    b.HasData(
                        new
                        {
                            TeamRoleId = 1,
                            RoleDescription = "Developer",
                            RoleName = "Developer"
                        },
                        new
                        {
                            TeamRoleId = 2,
                            RoleDescription = "Manager",
                            RoleName = "Manager"
                        },
                        new
                        {
                            TeamRoleId = 3,
                            RoleDescription = "Marketing Specialist",
                            RoleName = "Marketing Specialist"
                        });
                });

            modelBuilder.Entity("MES_F1.Models.WharehouseSpot", b =>
                {
                    b.Property<int>("WharehouseSpotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WharehouseSpotId"));

                    b.Property<string>("WharehouseSpotNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WharehouseSpotId");

                    b.ToTable("WharehouseSpot");
                });

            modelBuilder.Entity("MES_F1.Models.Worker", b =>
                {
                    b.Property<int>("WorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkerId"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamRoleId")
                        .HasColumnType("int");

                    b.Property<string>("WorkerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkerId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamRoleId");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            WorkerId = 1,
                            WorkerName = "John Doe"
                        },
                        new
                        {
                            WorkerId = 2,
                            WorkerName = "Jane Smith"
                        },
                        new
                        {
                            WorkerId = 3,
                            WorkerName = "Alice Johnson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MES_F1.Models.InstructionSteps", b =>
                {
                    b.HasOne("MES_F1.Models.Instruction", "Instruction")
                        .WithMany()
                        .HasForeignKey("InstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instruction");
                });

            modelBuilder.Entity("MES_F1.Models.MaterialLocation", b =>
                {
                    b.HasOne("MES_F1.Models.Materials", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MES_F1.Models.WharehouseSpot", "WarehouseSpot")
                        .WithMany()
                        .HasForeignKey("WarehouseSpotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Material");

                    b.Navigation("WarehouseSpot");
                });

            modelBuilder.Entity("MES_F1.Models.PartLocation", b =>
                {
                    b.HasOne("MES_F1.Models.Parts", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MES_F1.Models.WharehouseSpot", "WarehouseSpot")
                        .WithMany()
                        .HasForeignKey("WarehouseSpotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Part");

                    b.Navigation("WarehouseSpot");
                });

            modelBuilder.Entity("MES_F1.Models.Parts", b =>
                {
                    b.HasOne("MES_F1.Models.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");
                });

            modelBuilder.Entity("MES_F1.Models.Production", b =>
                {
                    b.HasOne("MES_F1.Models.Instruction", "Instruction")
                        .WithMany()
                        .HasForeignKey("InstructionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Instruction");
                });

            modelBuilder.Entity("MES_F1.Models.ProductionTask", b =>
                {
                    b.HasOne("MES_F1.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MES_F1.Models.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MES_F1.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Machine");

                    b.Navigation("Production");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("MES_F1.Models.Worker", b =>
                {
                    b.HasOne("MES_F1.Models.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("MES_F1.Models.Worker", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MES_F1.Models.ApplicationUser", null)
                        .WithMany("Workers")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MES_F1.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MES_F1.Models.TeamRole", "TeamRole")
                        .WithMany()
                        .HasForeignKey("TeamRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Team");

                    b.Navigation("TeamRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MES_F1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MES_F1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MES_F1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MES_F1.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MES_F1.Models.ApplicationUser", b =>
                {
                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
